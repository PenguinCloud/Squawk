name: Go Client Build and Release

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['main']

env:
  GO_VERSION: '1.23'
  APP_NAME: 'squawk-dns-client'

jobs:
  # Test job runs on PRs and pushes
  test:
    name: Test Go Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('dns-client-go/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: dns-client-go
        run: go mod download

      - name: Run tests
        working-directory: dns-client-go
        run: make test

      - name: Run linter
        working-directory: dns-client-go
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          make lint

      - name: Security scan
        working-directory: dns-client-go
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          make security

  # Build and release job for all pushes
  build-and-release:
    name: Build and Release Go Client
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine binary name and Docker tags
        id: naming
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          if [ "$GITHUB_REF" = "refs/heads/main" ] && [ -f .version ]; then
            VERSION=$(cat .version | tr -d '\n' | sed 's/^v//')
            echo "BINARY_NAME=squawk" >> $GITHUB_OUTPUT
            echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "DOCKER_TAG=$VERSION" >> $GITHUB_OUTPUT
            echo "DOCKER_TAG_LATEST=true" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=v$VERSION-client" >> $GITHUB_OUTPUT
          else
            echo "BINARY_NAME=squawk-beta" >> $GITHUB_OUTPUT
            echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
            echo "VERSION=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "DOCKER_TAG=$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "DOCKER_TAG_LATEST=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if release tag exists
        if: steps.naming.outputs.IS_RELEASE == 'true'
        id: tag_check
        run: |
          if git rev-parse "${{ steps.naming.outputs.RELEASE_TAG }}" >/dev/null 2>&1; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "Release tag ${{ steps.naming.outputs.RELEASE_TAG }} already exists, skipping GitHub release creation"
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "Release tag ${{ steps.naming.outputs.RELEASE_TAG }} does not exist, proceeding with GitHub release"
          fi

      # Build for all platforms using containerized approach
      - name: Build All Platforms (Containerized)
        working-directory: dns-client-go
        run: |
          # Use Docker for consistent cross-compilation environment
          docker run --rm -v $(pwd):/workspace -w /workspace \
            golang:${{ env.GO_VERSION }}-alpine \
            sh -c '
              apk add --no-cache git
              
              echo "Building ${{ steps.naming.outputs.BINARY_NAME }} for all platforms..."
              
              VERSION="${{ steps.naming.outputs.VERSION }}"
              BINARY_NAME="${{ steps.naming.outputs.BINARY_NAME }}"
              
              # Linux AMD64
              mkdir -p build/linux-amd64
              CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
                -ldflags "-X main.version=$VERSION -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
                -o build/linux-amd64/$BINARY_NAME \
                ./cmd/${{ env.APP_NAME }}
              
              # Linux ARM64
              mkdir -p build/linux-arm64
              CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build \
                -ldflags "-X main.version=$VERSION -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
                -o build/linux-arm64/$BINARY_NAME \
                ./cmd/${{ env.APP_NAME }}
              
              # macOS AMD64
              mkdir -p build/darwin-amd64
              CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build \
                -ldflags "-X main.version=$VERSION -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
                -o build/darwin-amd64/$BINARY_NAME \
                ./cmd/${{ env.APP_NAME }}
              
              # macOS ARM64 (Apple Silicon)
              mkdir -p build/darwin-arm64
              CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build \
                -ldflags "-X main.version=$VERSION -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
                -o build/darwin-arm64/$BINARY_NAME \
                ./cmd/${{ env.APP_NAME }}
              
              # Windows AMD64
              mkdir -p build/windows-amd64
              CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build \
                -ldflags "-X main.version=$VERSION -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
                -o build/windows-amd64/$BINARY_NAME.exe \
                ./cmd/${{ env.APP_NAME }}
              
              echo "Build completed for all platforms"
              find build -name "*$BINARY_NAME*" -type f -exec ls -la {} \;
            '

      # Create release packages (only for releases)
      - name: Create Release Packages
        if: steps.naming.outputs.IS_RELEASE == 'true' && (steps.tag_check.outputs.EXISTS == 'false' || steps.tag_check.outputs.EXISTS == '')
        working-directory: dns-client-go
        run: |
          mkdir -p build/packages
          BINARY_NAME="${{ steps.naming.outputs.BINARY_NAME }}"
          VERSION="${{ steps.naming.outputs.VERSION }}"
          
          # Create release archives
          cd build/linux-amd64 && tar -czf ../packages/squawk-$VERSION-linux-amd64.tar.gz $BINARY_NAME
          cd ../linux-arm64 && tar -czf ../packages/squawk-$VERSION-linux-arm64.tar.gz $BINARY_NAME
          cd ../darwin-amd64 && tar -czf ../packages/squawk-$VERSION-darwin-amd64.tar.gz $BINARY_NAME
          cd ../darwin-arm64 && tar -czf ../packages/squawk-$VERSION-darwin-arm64.tar.gz $BINARY_NAME
          cd ../windows-amd64 && zip -q ../packages/squawk-$VERSION-windows-amd64.zip $BINARY_NAME.exe
          
          # Generate checksums
          cd ../packages
          sha256sum * > SHA256SUMS

      # Docker build and push for all pushes
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: dns-client-go
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ steps.naming.outputs.VERSION }}
            BUILD_TIME=$(date -u +%Y-%m-%d_%H:%M:%S)
            GIT_COMMIT=${{ github.sha }}
            BINARY_NAME=${{ steps.naming.outputs.BINARY_NAME }}
          tags: |
            penguincloud/${{ env.APP_NAME }}:${{ steps.naming.outputs.DOCKER_TAG }}
            ghcr.io/${{ github.repository }}-go:${{ steps.naming.outputs.DOCKER_TAG }}
            ${{ steps.naming.outputs.DOCKER_TAG_LATEST == 'true' && format('penguincloud/{0}:latest', env.APP_NAME) || '' }}
            ${{ steps.naming.outputs.DOCKER_TAG_LATEST == 'true' && format('ghcr.io/{0}-go:latest', github.repository) || '' }}
          labels: |
            org.opencontainers.image.title=Squawk DNS Client (Go)
            org.opencontainers.image.description=High-performance DNS-over-HTTPS client
            org.opencontainers.image.version=${{ steps.naming.outputs.VERSION }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      # Create GitHub Release (only for main branch releases)
      - name: Extract Release Notes
        if: steps.naming.outputs.IS_RELEASE == 'true' && (steps.tag_check.outputs.EXISTS == 'false' || steps.tag_check.outputs.EXISTS == '')
        run: |
          chmod +x .github/scripts/extract-release-notes.sh
          GITHUB_REPOSITORY="${{ github.repository }}" \
          GITHUB_SHA="${{ github.sha }}" \
          .github/scripts/extract-release-notes.sh client "${{ steps.naming.outputs.VERSION }}" release_body.md
      
      - name: Create Release
        if: steps.naming.outputs.IS_RELEASE == 'true' && (steps.tag_check.outputs.EXISTS == 'false' || steps.tag_check.outputs.EXISTS == '')
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.naming.outputs.RELEASE_TAG }}
          release_name: Squawk DNS Client (Go) v${{ steps.naming.outputs.VERSION }}
          draft: false
          prerelease: false
          body_path: release_body.md

      # Upload release assets
      - name: Upload Release Assets
        if: steps.naming.outputs.IS_RELEASE == 'true' && (steps.tag_check.outputs.EXISTS == 'false' || steps.tag_check.outputs.EXISTS == '') && steps.create_release.outputs.upload_url
        working-directory: dns-client-go/build/packages
        run: |
          for file in *.tar.gz *.zip SHA256SUMS; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   -H "Content-Type: application/octet-stream" \
                   --data-binary @"$file" \
                   "${{ steps.create_release.outputs.upload_url }}?name=$file"
            fi
          done

  # Summary
  notify:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.event_name == 'push'
    steps:
      - name: Build Summary
        run: |
          echo "✅ Squawk DNS Client (Go) Build Complete!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Binary: ${{ needs.build-and-release.outputs.binary-name || 'squawk/squawk-beta' }}"
          echo "Platforms: Linux (amd64, arm64), macOS (amd64, arm64), Windows (amd64)"
          echo "Docker: penguincloud/squawk-dns-client:${{ github.ref_name }} and ghcr.io"