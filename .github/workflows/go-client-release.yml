name: Go Client Release

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  GO_VERSION: '1.21'
  APP_NAME: 'squawk-dns-client'

jobs:
  # Test job runs on PRs and main pushes
  test:
    name: Test Go Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('dns-client-go/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: dns-client-go
        run: go mod download

      - name: Run tests
        working-directory: dns-client-go
        run: make test

      - name: Run linter
        working-directory: dns-client-go
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          make lint

      - name: Security scan
        working-directory: dns-client-go
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          make security

  # Build and release job only runs on main branch pushes
  build-and-release:
    name: Build and Release Go Client
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from .version file
        id: version
        run: |
          VERSION=$(cat .version | tr -d '\n' | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=v$VERSION-client" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if client tag exists
        id: tag_check
        run: |
          if git rev-parse "v${{ steps.version.outputs.VERSION }}-client" >/dev/null 2>&1; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "Client tag v${{ steps.version.outputs.VERSION }}-client already exists, skipping release"
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "Client tag v${{ steps.version.outputs.VERSION }}-client does not exist, proceeding with release"
          fi

      - name: Set up Go
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('dns-client-go/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: go mod download

      # Build for all platforms
      - name: Build Linux AMD64
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: |
          mkdir -p build/linux-amd64
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
            -o build/linux-amd64/${{ env.APP_NAME }} \
            ./cmd/${{ env.APP_NAME }}

      - name: Build Linux ARM64
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: |
          mkdir -p build/linux-arm64
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
            -o build/linux-arm64/${{ env.APP_NAME }} \
            ./cmd/${{ env.APP_NAME }}

      - name: Build macOS AMD64
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: |
          mkdir -p build/darwin-amd64
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
            -o build/darwin-amd64/${{ env.APP_NAME }} \
            ./cmd/${{ env.APP_NAME }}

      - name: Build macOS ARM64
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: |
          mkdir -p build/darwin-arm64
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
            -o build/darwin-arm64/${{ env.APP_NAME }} \
            ./cmd/${{ env.APP_NAME }}

      - name: Build Windows AMD64
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: |
          mkdir -p build/windows-amd64
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.gitCommit=${{ github.sha }}" \
            -o build/windows-amd64/${{ env.APP_NAME }}.exe \
            ./cmd/${{ env.APP_NAME }}

      # Create macOS universal binary
      - name: Create macOS Universal Binary
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: |
          mkdir -p build/darwin-universal
          # Install lipo tool (available on GitHub runners)
          lipo -create -output build/darwin-universal/${{ env.APP_NAME }} \
            build/darwin-amd64/${{ env.APP_NAME }} \
            build/darwin-arm64/${{ env.APP_NAME }}
          # Verify the universal binary
          file build/darwin-universal/${{ env.APP_NAME }}
          lipo -info build/darwin-universal/${{ env.APP_NAME }}

      # Create Debian packages
      - name: Create Debian Package (AMD64)
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: |
          mkdir -p build/debian-amd64/DEBIAN
          mkdir -p build/debian-amd64/usr/local/bin
          mkdir -p build/debian-amd64/etc/systemd/system
          mkdir -p build/debian-amd64/usr/share/doc/${{ env.APP_NAME }}
          
          # Copy binary
          cp build/linux-amd64/${{ env.APP_NAME }} build/debian-amd64/usr/local/bin/
          
          # Create control file
          cat > build/debian-amd64/DEBIAN/control << EOF
          Package: ${{ env.APP_NAME }}
          Version: ${{ steps.version.outputs.VERSION }}
          Section: net
          Priority: optional
          Architecture: amd64
          Maintainer: PenguinCloud <support@penguintech.group>
          Description: Squawk DNS-over-HTTPS client
           A high-performance DNS-over-HTTPS client with mTLS support and local DNS forwarding.
           Provides secure DNS resolution using HTTPS protocol with mutual TLS authentication.
          Depends: libc6
          EOF
          
          # Create systemd service
          cat > build/debian-amd64/etc/systemd/system/${{ env.APP_NAME }}.service << 'EOF'
          [Unit]
          Description=Squawk DNS Client - DNS-over-HTTPS Forwarder
          After=network.target
          Wants=network.target
          
          [Service]
          Type=simple
          ExecStart=/usr/local/bin/${{ env.APP_NAME }} forward --config /etc/squawk/client.yaml
          Restart=always
          RestartSec=5
          User=nobody
          Group=nogroup
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Create copyright file
          cat > build/debian-amd64/usr/share/doc/${{ env.APP_NAME }}/copyright << 'EOF'
          Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
          Upstream-Name: squawk-dns-client
          Source: https://github.com/penguincloud/squawk
          
          Files: *
          Copyright: 2024 PenguinCloud
          License: MIT
          EOF
          
          # Set permissions
          chmod 755 build/debian-amd64/usr/local/bin/${{ env.APP_NAME }}
          chmod 644 build/debian-amd64/etc/systemd/system/${{ env.APP_NAME }}.service
          
          # Build package
          dpkg-deb --build build/debian-amd64 build/${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_amd64.deb

      - name: Create Debian Package (ARM64)
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: |
          mkdir -p build/debian-arm64/DEBIAN
          mkdir -p build/debian-arm64/usr/local/bin
          mkdir -p build/debian-arm64/etc/systemd/system
          mkdir -p build/debian-arm64/usr/share/doc/${{ env.APP_NAME }}
          
          # Copy binary
          cp build/linux-arm64/${{ env.APP_NAME }} build/debian-arm64/usr/local/bin/
          
          # Create control file
          cat > build/debian-arm64/DEBIAN/control << EOF
          Package: ${{ env.APP_NAME }}
          Version: ${{ steps.version.outputs.VERSION }}
          Section: net
          Priority: optional
          Architecture: arm64
          Maintainer: PenguinCloud <support@penguintech.group>
          Description: Squawk DNS-over-HTTPS client
           A high-performance DNS-over-HTTPS client with mTLS support and local DNS forwarding.
           Provides secure DNS resolution using HTTPS protocol with mutual TLS authentication.
          Depends: libc6
          EOF
          
          # Create systemd service
          cat > build/debian-arm64/etc/systemd/system/${{ env.APP_NAME }}.service << 'EOF'
          [Unit]
          Description=Squawk DNS Client - DNS-over-HTTPS Forwarder
          After=network.target
          Wants=network.target
          
          [Service]
          Type=simple
          ExecStart=/usr/local/bin/${{ env.APP_NAME }} forward --config /etc/squawk/client.yaml
          Restart=always
          RestartSec=5
          User=nobody
          Group=nogroup
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Create copyright file
          cat > build/debian-arm64/usr/share/doc/${{ env.APP_NAME }}/copyright << 'EOF'
          Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
          Upstream-Name: squawk-dns-client
          Source: https://github.com/penguincloud/squawk
          
          Files: *
          Copyright: 2024 PenguinCloud
          License: MIT
          EOF
          
          # Set permissions
          chmod 755 build/debian-arm64/usr/local/bin/${{ env.APP_NAME }}
          chmod 644 build/debian-arm64/etc/systemd/system/${{ env.APP_NAME }}.service
          
          # Build package
          dpkg-deb --build build/debian-arm64 build/${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_arm64.deb

      # Create release packages
      - name: Create Release Packages
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go
        run: |
          mkdir -p build/packages
          
          # Linux packages
          cd build/linux-amd64 && tar -czf ../packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz ${{ env.APP_NAME }}
          cd ../linux-arm64 && tar -czf ../packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz ${{ env.APP_NAME }}
          
          # macOS packages  
          cd ../darwin-amd64 && tar -czf ../packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz ${{ env.APP_NAME }}
          cd ../darwin-arm64 && tar -czf ../packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz ${{ env.APP_NAME }}
          cd ../darwin-universal && tar -czf ../packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-universal.tar.gz ${{ env.APP_NAME }}
          
          # Windows packages
          cd ../windows-amd64 && zip -q ../packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-windows-amd64.zip ${{ env.APP_NAME }}.exe
          
          # Copy Debian packages
          cd ..
          cp ${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_amd64.deb packages/
          cp ${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_arm64.deb packages/

      # Generate checksums
      - name: Generate Checksums
        if: steps.tag_check.outputs.EXISTS == 'false'
        working-directory: dns-client-go/build/packages
        run: |
          sha256sum * > SHA256SUMS
          cat SHA256SUMS

      # Create GitHub Release
      - name: Create Release
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          release_name: Squawk DNS Client (Go) v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            # Squawk DNS Client (Go) v${{ steps.version.outputs.VERSION }}
            
            High-performance DNS-over-HTTPS client written in Go with 1:1 feature parity with the Python client.
            
            ## Features
            
            - **DNS-over-HTTPS (DoH)** support with HTTP/2
            - **mTLS authentication** with ECC and RSA certificates
            - **Bearer token authentication** for server access
            - **Local DNS forwarding** (UDP/TCP to DoH translation)
            - **YAML configuration** file support
            - **Environment variable** configuration
            - **Cross-platform support** (Linux, macOS, Windows)
            - **High performance** with ~10ms cold start and low memory usage
            
            ## Installation Options
            
            ### Docker (Recommended)
            ```bash
            # Run Go client with DNS forwarding
            docker run -p 53:53/udp -p 53:53/tcp \
              -e SQUAWK_SERVER_URL=https://your-server:8443 \
              -e SQUAWK_AUTH_TOKEN=your-token \
              penguincloud/${{ env.APP_NAME }}:${{ steps.version.outputs.VERSION }} forward -v
            ```
            
            ### Linux (Debian/Ubuntu)
            ```bash
            # Download and install the .deb package
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.TAG }}/${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_amd64.deb
            sudo dpkg -i ${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_amd64.deb
            
            # Enable and start the systemd service
            sudo systemctl enable --now ${{ env.APP_NAME }}
            ```
            
            ### macOS (Universal Binary)
            ```bash
            # Download and extract universal binary (Intel + Apple Silicon)
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.TAG }}/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-universal.tar.gz
            tar -xzf ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-universal.tar.gz
            chmod +x ${{ env.APP_NAME }}
            sudo mv ${{ env.APP_NAME }} /usr/local/bin/
            ```
            
            ### Windows
            ```cmd
            # Download and extract the ZIP file
            # Add the executable to your PATH environment variable
            ```
            
            ## Quick Start Examples
            
            ### Basic DNS Query
            ```bash
            # Simple DNS query
            ${{ env.APP_NAME }} -d example.com
            
            # Query specific record type
            ${{ env.APP_NAME }} -d example.com -t AAAA
            
            # JSON output
            ${{ env.APP_NAME }} -d example.com -j
            ```
            
            ### DNS Forwarding
            ```bash
            # Start DNS forwarder (requires sudo for port 53)
            sudo ${{ env.APP_NAME }} forward -s https://your-server:8443 -a your-token
            
            # Forward UDP and TCP
            sudo ${{ env.APP_NAME }} forward -u -T -s https://your-server:8443
            ```
            
            ### mTLS Authentication
            ```bash
            # With client certificates
            ${{ env.APP_NAME }} -d example.com \
              -s https://your-server:8443 \
              -a your-token \
              --ca-cert ca.crt \
              --client-cert client.crt \
              --client-key client.key
            ```
            
            ### Configuration File
            ```bash
            # Generate example configuration
            ${{ env.APP_NAME }} config generate client.yaml
            
            # Use configuration file
            ${{ env.APP_NAME }} -c client.yaml -d example.com
            ```
            
            ## Docker Images
            
            - `penguincloud/${{ env.APP_NAME }}:${{ steps.version.outputs.VERSION }}` - Go client
            - `penguincloud/${{ env.APP_NAME }}:latest` - Latest Go client
            - `ghcr.io/${{ github.repository }}-go:${{ steps.version.outputs.VERSION }}` - GitHub Container Registry
            
            ## Platform Support
            
            - **Linux**: AMD64, ARM64 (native binaries + Docker + .deb packages)
            - **macOS**: Universal binary (Intel + Apple Silicon)
            - **Windows**: AMD64 (native binary)
            - **Docker**: Multi-architecture (linux/amd64, linux/arm64)
            
            ## Performance Characteristics
            
            - **Cold Start**: ~10ms (vs ~100ms Python)
            - **Memory Usage**: ~15MB (vs ~30MB Python)  
            - **Binary Size**: Single ~10MB executable
            - **Concurrent Requests**: Native goroutine support
            
            ## Environment Variables
            
            ```bash
            # Server configuration
            export SQUAWK_SERVER_URL=https://dns.example.com:8443
            export SQUAWK_AUTH_TOKEN=your-bearer-token
            export SQUAWK_DOMAIN=example.com
            export SQUAWK_RECORD_TYPE=A
            
            # mTLS configuration
            export SQUAWK_CLIENT_CERT=/path/to/client.crt
            export SQUAWK_CLIENT_KEY=/path/to/client.key
            export SQUAWK_CA_CERT=/path/to/ca.crt
            export SQUAWK_VERIFY_SSL=true
            
            # DNS forwarding
            export SQUAWK_LISTEN_UDP=true
            export SQUAWK_LISTEN_TCP=true
            export SQUAWK_UDP_ADDRESS=127.0.0.1:53
            export SQUAWK_TCP_ADDRESS=127.0.0.1:53
            ```
            
            ## Compatibility with Python Client
            
            The Go client provides 1:1 feature parity:
            
            | Feature | Python | Go |
            |---------|--------|----|
            | DNS-over-HTTPS | ✅ | ✅ |
            | Bearer Token Auth | ✅ | ✅ |
            | mTLS Support | ✅ | ✅ |
            | UDP/TCP Forwarding | ✅ | ✅ |
            | Configuration Files | ✅ | ✅ |
            | Environment Variables | ✅ | ✅ |
            | SSL Verification | ✅ | ✅ |
            | JSON Output | ✅ | ✅ |
            
            ## Security Features
            
            - TLS certificate verification (enabled by default)
            - Client certificate support for mTLS
            - Secure defaults with configurable security levels
            - CA certificate validation
            - Bearer token authentication
            
            ## Command Reference
            
            ```bash
            # Main commands
            ${{ env.APP_NAME }}              # DNS query mode
            ${{ env.APP_NAME }} forward      # DNS forwarding mode
            ${{ env.APP_NAME }} config       # Configuration management
            ${{ env.APP_NAME }} version      # Version information
            
            # Global flags
            -c, --config     # Configuration file path
            -v, --verbose    # Enable verbose output
            -h, --help       # Show help
            ```
            
            ## Checksums
            
            Verify downloads using the SHA256SUMS file included in this release.
            
            Built from commit: ${{ github.sha }}

      # Upload release assets
      - name: Upload Linux AMD64 Archive
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dns-client-go/build/packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
          asset_name: ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Linux ARM64 Archive
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dns-client-go/build/packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz
          asset_name: ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS Universal Archive
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dns-client-go/build/packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-universal.tar.gz
          asset_name: ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-universal.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS AMD64 Archive
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dns-client-go/build/packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz
          asset_name: ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS ARM64 Archive
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dns-client-go/build/packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz
          asset_name: ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Archive
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dns-client-go/build/packages/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-windows-amd64.zip
          asset_name: ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-windows-amd64.zip
          asset_content_type: application/zip

      - name: Upload Debian AMD64 Package
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dns-client-go/build/packages/${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_amd64.deb
          asset_name: ${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Debian ARM64 Package
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dns-client-go/build/packages/${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_arm64.deb
          asset_name: ${{ env.APP_NAME }}_${{ steps.version.outputs.VERSION }}_arm64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Checksums
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dns-client-go/build/packages/SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain

      # Docker build and push
      - name: Set up Docker Buildx
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Go client Docker image
      - name: Build and push Go client Docker image
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/build-push-action@v5
        with:
          context: dns-client-go
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_TIME=$(date -u +%Y-%m-%d_%H:%M:%S)
            GIT_COMMIT=${{ github.sha }}
          tags: |
            penguincloud/${{ env.APP_NAME }}:${{ steps.version.outputs.VERSION }}
            penguincloud/${{ env.APP_NAME }}:latest
            ghcr.io/${{ github.repository }}-go:${{ steps.version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}-go:latest
          labels: |
            org.opencontainers.image.title=Squawk DNS Client (Go)
            org.opencontainers.image.description=High-performance DNS-over-HTTPS client with mTLS support
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  # Notification job
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Go Client Release Summary
        run: |
          echo "✅ Squawk DNS Client (Go) Release Complete!"
          echo "Version: $(cat .version)"
          echo "Platforms: Linux (amd64, arm64), macOS (universal, amd64, arm64), Windows (amd64)"
          echo "Packages: Native binaries, Debian packages, Docker multi-arch image"
          echo "Features: DoH, mTLS, DNS forwarding, YAML config, environment variables"
          echo "Performance: ~10ms cold start, ~15MB memory, single binary"
          echo "Docker: penguincloud/squawk-dns-client and ghcr.io