name: DNS Server Release

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Test job runs on PRs and main pushes
  test:
    name: Test DNS Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('dns-server/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install requirements if they exist
          if [ -f dns-server/requirements.txt ]; then
            pip install -r dns-server/requirements.txt
          else
            # Install core dependencies
            pip install py4web pydal dnspython requests PyYAML cryptography
          fi
          
          # Install testing dependencies
          if [ -f dns-server/requirements-dev.txt ]; then
            pip install -r dns-server/requirements-dev.txt
          else
            pip install pytest pytest-cov pytest-mock black flake8 mypy safety bandit
          fi

      - name: Lint with flake8
        run: |
          flake8 dns-server/bins/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 dns-server/bins/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan with bandit
        run: |
          bandit -r dns-server/bins/ -f json || true

      - name: Safety check
        run: |
          safety check || true

      - name: Run tests
        run: |
          if [ -d dns-server/tests ]; then
            pytest dns-server/tests/ -v --cov=dns-server/bins --cov-report=term-missing
          else
            echo "No tests found, skipping test execution"
          fi

  # Build and release job only runs on main branch pushes
  build-and-release:
    name: Build and Release DNS Server
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from .version file
        id: version
        run: |
          VERSION=$(cat .version | tr -d '\n' | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=v$VERSION-server" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if server tag exists
        id: tag_check
        run: |
          if git rev-parse "v${{ steps.version.outputs.VERSION }}-server" >/dev/null 2>&1; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "Server tag v${{ steps.version.outputs.VERSION }}-server already exists, skipping release"
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "Server tag v${{ steps.version.outputs.VERSION }}-server does not exist, proceeding with release"
          fi

      # Docker build and push for server components
      - name: Set up Docker Buildx
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push DNS Server Docker images
      - name: Build and push DNS Server Docker image (Development)
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: dns-server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            penguincloud/squawk-dns-server:${{ steps.version.outputs.VERSION }}
            penguincloud/squawk-dns-server:latest
            ghcr.io/${{ github.repository }}-server:${{ steps.version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}-server:latest
          labels: |
            org.opencontainers.image.title=Squawk DNS Server
            org.opencontainers.image.description=DNS-over-HTTPS server with web console and authentication
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push DNS Server Production Docker image
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            penguincloud/squawk-dns-server-prod:${{ steps.version.outputs.VERSION }}
            penguincloud/squawk-dns-server-prod:latest
            ghcr.io/${{ github.repository }}-server-prod:${{ steps.version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}-server-prod:latest
          labels: |
            org.opencontainers.image.title=Squawk DNS Server (Production)
            org.opencontainers.image.description=Production-optimized DNS-over-HTTPS server
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push DNS Client Python Docker image
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: dns-client
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            penguincloud/squawk-dns-client-python:${{ steps.version.outputs.VERSION }}
            penguincloud/squawk-dns-client-python:latest
            ghcr.io/${{ github.repository }}-client-python:${{ steps.version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}-client-python:latest
          labels: |
            org.opencontainers.image.title=Squawk DNS Client (Python)
            org.opencontainers.image.description=Python DNS-over-HTTPS client with local forwarding
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Testing Docker image
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: testing
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            penguincloud/squawk-dns-testing:${{ steps.version.outputs.VERSION }}
            penguincloud/squawk-dns-testing:latest
            ghcr.io/${{ github.repository }}-testing:${{ steps.version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}-testing:latest
          labels: |
            org.opencontainers.image.title=Squawk DNS Testing
            org.opencontainers.image.description=Testing environment with comprehensive test suite
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      # Create GitHub Release for server
      - name: Create Server Release
        if: steps.tag_check.outputs.EXISTS == 'false'
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          release_name: Squawk DNS Server v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            # Squawk DNS Server v${{ steps.version.outputs.VERSION }}
            
            Complete DNS-over-HTTPS server system with web console, authentication, and comprehensive security features.
            
            ## Server Features
            
            ### Core DNS Server
            - DNS-over-HTTPS proxy with HTTP/3 support
            - High-performance async processing with multi-threading
            - DNS blackholing with Maravento blacklist integration
            - Redis/Valkey caching with configurable TTL
            - Comprehensive request logging with real IP detection
            - UDP syslog forwarding capability
            
            ### Security & Authentication
            - mTLS support with automatic ECC certificate generation
            - Dual authentication (Bearer token + client certificate)
            - Google Authenticator MFA integration
            - Single Sign-On (SAML, LDAP, OAuth2)
            - Configurable brute force protection
            - Email notifications for security events
            - Redis/Valkey TLS and authentication support
            
            ### Web Console
            - Admin portal for domain/IP blocking management
            - mTLS certificate bundle downloads
            - User management with role-based access
            - Real-time monitoring and statistics
            - Configuration management interface
            
            ### Python Client
            - Feature parity with Go client
            - DNS forwarding (UDP/TCP to DoH)
            - mTLS and bearer token authentication
            - Configuration via files and environment variables
            
            ## Docker Images
            
            ### Development Server
            ```bash
            docker run -p 8080:8080 -p 8000:8000 \
              penguincloud/squawk-dns-server:${{ steps.version.outputs.VERSION }}
            ```
            
            ### Production Server
            ```bash
            docker run -p 8080:8080 \
              -e SQUAWK_ENV=production \
              -e SQUAWK_LOG_LEVEL=INFO \
              penguincloud/squawk-dns-server-prod:${{ steps.version.outputs.VERSION }}
            ```
            
            ### Python Client
            ```bash
            docker run -p 53:53/udp -p 53:53/tcp \
              -e DNS_SERVER=https://your-server:8080 \
              -e AUTH_TOKEN=your-token \
              penguincloud/squawk-dns-client-python:${{ steps.version.outputs.VERSION }}
            ```
            
            ### Testing Environment
            ```bash
            docker run penguincloud/squawk-dns-testing:${{ steps.version.outputs.VERSION }}
            ```
            
            ## Docker Compose Deployment
            
            ```bash
            # Download complete docker-compose setup
            curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Start complete system
            docker-compose up -d
            
            # With PostgreSQL
            docker-compose --profile postgres up -d
            
            # With monitoring
            docker-compose --profile monitoring up -d
            ```
            
            ## Environment Variables
            
            ### Server Configuration
            ```bash
            SQUAWK_ENV=production
            SQUAWK_PORT=8080
            SQUAWK_CONSOLE_PORT=8000
            ENABLE_MTLS=true
            ENABLE_BLACKLIST=true
            MARAVENTO_URL=https://github.com/maravento/blackweb
            ```
            
            ### Security Settings
            ```bash
            USE_NEW_AUTH=true
            ENABLE_MFA=true
            BRUTE_FORCE_MAX_ATTEMPTS=5
            BRUTE_FORCE_LOCKOUT_MINUTES=30
            SMTP_SERVER=smtp.example.com
            SMTP_PORT=587
            SMTP_USERNAME=alerts@example.com
            ```
            
            ### Cache Configuration
            ```bash
            CACHE_TYPE=redis
            REDIS_URL=rediss://redis:6379
            REDIS_PASSWORD=your-redis-password
            CACHE_TTL=300
            ```
            
            ## GitHub Container Registry
            All images are also available at:
            - `ghcr.io/${{ github.repository }}-server:${{ steps.version.outputs.VERSION }}`
            - `ghcr.io/${{ github.repository }}-server-prod:${{ steps.version.outputs.VERSION }}`
            - `ghcr.io/${{ github.repository }}-client-python:${{ steps.version.outputs.VERSION }}`
            - `ghcr.io/${{ github.repository }}-testing:${{ steps.version.outputs.VERSION }}`
            
            ## Security Considerations
            
            1. **Always use TLS/mTLS** in production environments
            2. **Enable Redis/Valkey authentication and TLS** for cache security
            3. **Configure brute force protection** to prevent authentication attacks
            4. **Set up email notifications** for security event monitoring
            5. **Regularly update blacklists** for DNS filtering effectiveness
            6. **Monitor logs** for suspicious DNS query patterns
            7. **Use strong authentication tokens** and rotate them regularly
            
            ## Quick Start
            
            ### Minimal Setup
            ```bash
            # Start server with default settings
            docker run -p 8080:8080 -p 8000:8000 \
              penguincloud/squawk-dns-server:${{ steps.version.outputs.VERSION }}
            
            # Access web console
            open http://localhost:8000
            ```
            
            ### Production Setup
            ```bash
            # Create production environment
            echo "SQUAWK_ENV=production" > .env
            echo "ENABLE_MTLS=true" >> .env
            echo "USE_NEW_AUTH=true" >> .env
            echo "ENABLE_MFA=true" >> .env
            
            # Start production server
            docker run --env-file .env -p 8080:8080 \
              penguincloud/squawk-dns-server-prod:${{ steps.version.outputs.VERSION }}
            ```
            
            Built from commit: ${{ github.sha }}

  # Notification job
  notify:
    name: Notify Server Release
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Server Release Summary
        run: |
          echo "✅ Squawk DNS Server Release Complete!"
          echo "Version: $(cat .version)"
          echo "Docker Images: DNS Server (Dev), DNS Server (Prod), Python Client, Testing"
          echo "Features: mTLS, MFA, SSO, DNS Blackholing, Redis Caching, Web Console"
          echo "Registries: Docker Hub (penguincloud/*) and GitHub Container Registry"
          echo "Tag: v$(cat .version | tr -d '\n' | sed 's/^v//')-server"