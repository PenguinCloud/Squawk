version: '3.8'

services:
  # DNS Server with Enterprise Features
  dns-server:
    build:
      context: ./dns-server
      dockerfile: Dockerfile
    image: squawk-dns-server:latest
    container_name: squawk-dns-server
    restart: unless-stopped
    ports:
      - "8080:8080"  # DNS-over-HTTPS API
      - "8443:8443"  # DNS-over-HTTPS API (TLS)
    environment:
      - PORT=8080
      - USE_NEW_AUTH=true
      - LOG_LEVEL=INFO
      - ENABLE_BLACKLIST=false
      - CACHE_ENABLED=true
      - CACHE_TTL=300
      - VALKEY_URL=redis://valkey:6379
      - ENABLE_MTLS=false
      - CERT_DIR=/app/certs
    volumes:
      - ./dns-server/data:/app/data
      - ./dns-server/logs:/app/logs
      - ./dns-server/certs:/app/certs
      - ./dns-server/web:/app/web
    networks:
      - squawk-network
    depends_on:
      - valkey
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Console
  web-console:
    build:
      context: ./dns-server
      dockerfile: Dockerfile
    image: squawk-dns-server:latest
    container_name: squawk-web-console
    restart: unless-stopped
    command: ["sh", "-c", "cd /app/web && python3 -m py4web run apps --host 0.0.0.0 --port 8000"]
    ports:
      - "8000:8000"  # Web console
    environment:
      - PY4WEB_HOST=0.0.0.0
      - PY4WEB_PORT=8000
      - LOG_LEVEL=INFO
    volumes:
      - ./dns-server/data:/app/data
      - ./dns-server/web:/app/web
    networks:
      - squawk-network
    depends_on:
      - dns-server

  # DNS Client Forwarder
  dns-client:
    build:
      context: ./dns-client
      dockerfile: Dockerfile
    image: squawk-dns-client:latest
    container_name: squawk-dns-client
    restart: unless-stopped
    ports:
      - "53:53/udp"
      - "53:53/tcp"
    cap_add:
      - NET_ADMIN  # Required for DNS port binding
    environment:
      - SQUAWK_SERVER_URL=http://dns-server:8080
      - SQUAWK_AUTH_TOKEN=${AUTH_TOKEN:-your-secure-token}
      - LOG_LEVEL=INFO
      - SQUAWK_VERIFY_SSL=false
    volumes:
      - ./dns-client/data:/app/data
      - ./dns-client/logs:/app/logs
      - ./dns-client/certs:/app/certs
    networks:
      - squawk-network
    depends_on:
      - dns-server

  # Valkey/Redis Cache
  valkey:
    image: valkey/valkey:latest
    container_name: squawk-valkey
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - valkey-data:/data
    networks:
      - squawk-network
    command: ["valkey-server", "--appendonly", "yes"]

  # PostgreSQL Database (optional - for enterprise deployments)
  postgres:
    image: postgres:15
    container_name: squawk-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: squawk
      POSTGRES_USER: squawk_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-squawk_pass_dev_only}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - squawk-network
    profiles:
      - postgres  # Only start with --profile postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U squawk_user -d squawk"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: squawk-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - squawk-network
    profiles:
      - monitoring  # Only start with --profile monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: squawk-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - squawk-network
    profiles:
      - monitoring  # Only start with --profile monitoring
    depends_on:
      - prometheus

  # Test Runner (includes dev dependencies)
  test-runner:
    build:
      context: ./dns-server
      dockerfile: Dockerfile.test
    image: squawk-dns-test:latest
    container_name: squawk-test-runner
    volumes:
      - ./dns-server:/app/dns-server
    working_dir: /app/dns-server
    command: ["python3", "-m", "pytest", "tests/", "-v"]
    networks:
      - squawk-network
    profiles:
      - testing  # Only start with --profile testing

networks:
  squawk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  valkey-data:
  postgres-data:
  prometheus-data:
  grafana-data: